let messages = [];
let apiKey = ''; // Will be loaded from storage
let pageContent = null;

// DOM Elements
const chatContainer = document.getElementById('chat-container');
const messageInput = document.getElementById('message-input');
const sendButton = document.getElementById('send-button');
const modelSelect = document.getElementById('model-select');
const temperatureInput = document.getElementById('temperature');
const newChatButton = document.getElementById('new-chat');

// Auto-resize textarea
messageInput.addEventListener('input', function() {
  this.style.height = 'auto';
  this.style.height = (this.scrollHeight) + 'px';
});

// Reset textarea height when cleared
function resetTextareaHeight() {
  messageInput.style.height = 'auto';
}

// Load API key from storage
chrome.storage.sync.get(['mistralApiKey'], function(result) {
  if (result.mistralApiKey) {
    apiKey = result.mistralApiKey;
  } else {
    // Prompt for API key if not set
    const key = prompt('Please enter your Mistral API key:');
    if (key) {
      apiKey = key;
      chrome.storage.sync.set({ mistralApiKey: key });
    }
  }
});

// Setup communication with parent window
window.addEventListener('message', async (event) => {
  if (event.data.action === 'pageContent') {
    pageContent = event.data.content;
  } else if (event.data.action === 'selectedText') {
    if (event.data.content) {
      messageInput.value = `Help me understand this text:\n\n${event.data.content}`;
      messageInput.dispatchEvent(new Event('input'));
    }
  } else if (event.data.action === 'contextMenu') {
    handleContextMenuAction(event.data.type, event.data.content);
  } else if (event.data.action === 'saveConversation') {
    saveConversation();
  } else if (event.data.action === 'copyConversation') {
    copyConversation();
  } else if (event.data.action === 'setTheme') {
    document.documentElement.classList.toggle('dark-theme', event.data.theme === 'dark');
  } else if (event.data.action === 'getConversation') {
    const conversation = formatConversation();
    event.source.postMessage({
      action: 'conversationContent',
      content: conversation
    }, '*');
  }
});

// Load theme preference on startup
chrome.storage.sync.get(['theme'], function(result) {
  const isDark = result.theme === 'dark';
  document.documentElement.classList.toggle('dark-theme', isDark);
});

// Request page content on load
window.parent.postMessage({ action: 'getPageContent' }, '*');

// Event Listeners
sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});
newChatButton.addEventListener('click', () => {
  messages = [];
  chatContainer.innerHTML = '';
});

async function sendMessage() {
  const content = messageInput.value.trim();
  if (!content) return;

  // Clear input and reset height
  messageInput.value = '';
  resetTextareaHeight();

  // Add user message to chat
  appendMessage('user', content);

  // Prepare context-aware message
  let contextMessage = '';
  if (pageContent) {
    contextMessage = `Current webpage: ${pageContent.url}
Title: ${pageContent.title}
Description: ${pageContent.metadata.description}

You are a helpful AI assistant that can see the current webpage. You can reference the page content in your responses when relevant. Keep your responses concise and focused on the user's question.

`;
  }

  // Add messages to conversation
  messages = [
    { role: 'system', content: contextMessage },
    ...messages,
    { role: 'user', content }
  ];

  try {
    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: modelSelect.value,
        messages: messages.filter(m => m.content.trim()),
        temperature: parseFloat(temperatureInput.value)
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const assistantMessage = data.choices[0].message.content;
    
    // Add assistant message to chat
    appendMessage('assistant', assistantMessage);
    messages.push({ role: 'assistant', content: assistantMessage });

  } catch (error) {
    console.error('Error:', error);
    appendMessage('assistant', 'Sorry, there was an error processing your request.');
  }
}

function handleContextMenuAction(type, content) {
  let prompt = '';
  switch (type) {
    case 'analyze':
      prompt = `Analyze this text in detail:\n\nBefore: ${content.beforeContext}\n[SELECTION]: ${content.text}\nAfter: ${content.afterContext}`;
      break;
    case 'summarize':
      prompt = `Summarize this text concisely:\n\n${content.text}`;
      break;
    case 'remember':
      prompt = `I've highlighted this text for reference: "${content.text}"\nPlease remember it for our conversation.`;
      break;
    case 'ask':
      prompt = `Help me understand this text:\n\n${content.text}`;
      break;
  }

  if (prompt) {
    messageInput.value = prompt;
    messageInput.dispatchEvent(new Event('input'));
    sendMessage();
  }
}

function formatConversation() {
  const chatContainer = document.getElementById('chat-container');
  if (!chatContainer) return '';

  const messages = Array.from(chatContainer.children);
  let conversation = '';
  
  // Add metadata
  const now = new Date();
  conversation += `# Mistral AI Chat - ${now.toLocaleString()}\n\n`;
  conversation += `URL: ${window.location.href}\n\n`;

  // Format messages
  messages.forEach(msg => {
    const role = msg.classList.contains('user-message') ? 'User' : 'Assistant';
    let content = '';

    if (msg.querySelector('.content-analysis')) {
      content = formatContentAnalysis(JSON.parse(msg.dataset.content));
    } else {
      content = msg.textContent.trim();
    }
    
    conversation += `## ${role}\n${content}\n\n`;
  });

  return conversation;
}

function formatContentAnalysis(content) {
  if (!content) return '';

  let formatted = '';

  if (content.images && content.images.length > 0) {
    formatted += '### Images\n';
    content.images.forEach(img => {
      formatted += `- ${img.description || img.alt || 'Image'}\n`;
      formatted += `  Size: ${img.dimensions.width}x${img.dimensions.height}\n`;
    });
    formatted += '\n';
  }

  if (content.tables && content.tables.length > 0) {
    formatted += '### Tables\n';
    content.tables.forEach(table => {
      if (table.headers.length > 0) {
        formatted += `| ${table.headers.join(' | ')} |\n`;
        formatted += `| ${table.headers.map(() => '---').join(' | ')} |\n`;
      }
      table.data.forEach(row => {
        formatted += `| ${row.join(' | ')} |\n`;
      });
      formatted += '\n';
    });
  }

  if (content.codeBlocks && content.codeBlocks.length > 0) {
    formatted += '### Code Blocks\n';
    content.codeBlocks.forEach(block => {
      formatted += `\`\`\`${block.language}\n${block.content}\n\`\`\`\n\n`;
    });
  }

  return formatted || content.textContent || '';
}

async function saveConversation() {
  const conversation = formatConversation();
  const blob = new Blob([conversation], { type: 'text/markdown' });
  const now = new Date();
  const filename = `mistral-chat-${now.toISOString().slice(0,19).replace(/[:]/g, '-')}.md`;

  try {
    const handle = await window.showSaveFilePicker({
      suggestedName: filename,
      types: [{
        description: 'Markdown files',
        accept: { 'text/markdown': ['.md'] }
      }]
    });
    
    const writable = await handle.createWritable();
    await writable.write(blob);
    await writable.close();

    // Show success animation
    const saveButton = document.querySelector('.mistral-header-button');
    saveButton.classList.add('success-animation');
    setTimeout(() => saveButton.classList.remove('success-animation'), 300);
  } catch (error) {
    console.error('Error saving conversation:', error);
  }
}

async function copyConversation() {
  const conversation = formatConversation();
  
  try {
    await navigator.clipboard.writeText(conversation);
    
    // Show success animation
    const copyButton = document.querySelector('.mistral-header-button:nth-child(2)');
    copyButton.classList.add('success-animation');
    setTimeout(() => copyButton.classList.remove('success-animation'), 300);
  } catch (error) {
    console.error('Error copying conversation:', error);
  }
}

function appendMessage(role, content) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${role}-message`;
  
  if (typeof content === 'object' && content.analysis) {
    const analysis = formatContentAnalysis(content);
    if (analysis) {
      messageDiv.innerHTML = `
        <div class="content-analysis">
          <h4>Page Content Analysis</h4>
          ${analysis}
        </div>
      `;
      // Store original content for export
      messageDiv.dataset.content = JSON.stringify(content);
    }
  } else {
    const formattedContent = content
      .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>')
      .replace(/`([^`]+)`/g, '<code>$1</code>')
      .replace(/^\s*[-*]\s+(.+)$/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
      .split('\n\n').map(p => `<p>${p}</p>`).join('');
    
    messageDiv.innerHTML = formattedContent;
  }
  
  chatContainer.appendChild(messageDiv);
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

// Add context menu for selected text
document.addEventListener('mouseup', () => {
  const selectedText = window.getSelection().toString().trim();
  if (selectedText) {
    window.parent.postMessage({ action: 'getSelectedText' }, '*');
  }
});
